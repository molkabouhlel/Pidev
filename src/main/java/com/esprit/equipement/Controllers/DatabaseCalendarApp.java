package com.esprit.equipement.Controllers;

import com.calendarfx.model.*;
import com.calendarfx.view.CalendarView;
import com.esprit.equipement.utils.DataSource;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.sql.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;

public class DatabaseCalendarApp extends Application {
    private Connection cnx = DataSource.getInstance().getConnection();

    @Override
    public void start(Stage primaryStage) {
        CalendarView calendarView = new CalendarView();
        Calendar calendar = createCalendarFromDatabase();
        CalendarSource calendarSource = new CalendarSource("My Calendars");
        calendarSource.getCalendars().addAll(calendar);
        calendarView.getCalendarSources().addAll(calendarSource);
        Button addButton = new Button("Add Event");
        addButton.setOnAction(event -> {
            addEventToDatabase("Sample Event", LocalDate.now(), LocalTime.now(), LocalTime.now().plusHours(1));
            // Refresh the calendar view to reflect the changes
            calendarView.refreshData();
        });

        VBox vbox = new VBox(calendarView, addButton);
        Scene scene = new Scene(vbox, 800, 600);

        primaryStage.setTitle("Database Calendar App");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private Calendar createCalendarFromDatabase() {
        Calendar calendar = new Calendar("Rendez-Vous");
        calendar.setStyle(Calendar.Style.STYLE1);

        String req = "SELECT date_rv, id_coach FROM rendez_vous";

        try (Statement st = cnx.createStatement();
             ResultSet rs = st.executeQuery(req)) {
            while (rs.next()) {
                Timestamp timestamp = rs.getTimestamp("date_rv");
                LocalDateTime eventDateTime = timestamp.toLocalDateTime();
                String coach = Integer.toString(rs.getInt("id_coach"));
                Entry<String> entry = new Entry<>("rendez-vous");
                entry.changeStartDate(eventDateTime.toLocalDate());
                entry.changeStartTime(eventDateTime.toLocalTime());
                entry.changeEndTime(eventDateTime.toLocalTime().plusHours(1));
                calendar.addEntry(entry);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
;
        return calendar;
    }

    private void addEventToDatabase(String eventName, LocalDate startDate, LocalTime startTime, LocalTime endTime) {
        String insertQuery = "INSERT INTO rendez_vous (date_rv, id_coach,id_eq) VALUES (NOW(), 5, 20)";
        try (Statement statement = cnx.createStatement()) {
            int affectedRows = statement.executeUpdate(insertQuery, Statement.RETURN_GENERATED_KEYS);

            if (affectedRows > 0) {
                // Retrieve the auto-generated ID if needed
                try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        int autoGeneratedId = generatedKeys.getInt(1);
                        System.out.println("Auto-generated ID: " + autoGeneratedId);
                    }
                }
            } else {
                System.out.println("Failed to add event to the database.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            System.err.println("SQL Error: " + e.getMessage());
        }
    }


}
